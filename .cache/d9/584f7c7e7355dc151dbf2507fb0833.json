{"id":"client/node_modules/vscode-languageclient/lib/utils/electron.js","dependencies":[{"name":"c:\\Users\\johanpedersen\\Projects\\lsp\\package.json","includedInParent":true,"mtime":1566467320912},{"name":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\package.json","includedInParent":true,"mtime":1552904651578},{"name":"path","loc":{"line":7,"column":21},"parent":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\lib\\utils\\electron.js","resolved":"c:\\Users\\johanpedersen\\Projects\\lsp\\node_modules\\path-browserify\\index.js"},{"name":"os","loc":{"line":8,"column":19},"parent":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\lib\\utils\\electron.js","resolved":"c:\\Users\\johanpedersen\\Projects\\lsp\\node_modules\\os-browserify\\browser.js"},{"name":"net","loc":{"line":9,"column":20},"parent":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\lib\\utils\\electron.js","resolved":"c:\\Users\\johanpedersen\\Projects\\lsp\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"child_process","loc":{"line":10,"column":19},"parent":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\lib\\utils\\electron.js","resolved":"c:\\Users\\johanpedersen\\Projects\\lsp\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"process","parent":"c:\\Users\\johanpedersen\\Projects\\lsp\\client\\node_modules\\vscode-languageclient\\lib\\utils\\electron.js","resolved":"c:\\Users\\johanpedersen\\Projects\\lsp\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar __dirname = \"c:\\\\Users\\\\johanpedersen\\\\Projects\\\\lsp\\\\client\\\\node_modules\\\\vscode-languageclient\\\\lib\\\\utils\";\n/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = require(\"path\");\r\nconst os = require(\"os\");\r\nconst net = require(\"net\");\r\nconst cp = require(\"child_process\");\r\nfunction makeRandomHexString(length) {\r\n    let chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\r\n    let result = '';\r\n    for (let i = 0; i < length; i++) {\r\n        let idx = Math.floor(chars.length * Math.random());\r\n        result += chars[idx];\r\n    }\r\n    return result;\r\n}\r\nfunction generatePipeName() {\r\n    let randomName = 'vscode-lang-' + makeRandomHexString(40);\r\n    if (process.platform === 'win32') {\r\n        return '\\\\\\\\.\\\\pipe\\\\' + randomName + '-sock';\r\n    }\r\n    // Mac/Unix: use socket file\r\n    return path.join(os.tmpdir(), randomName + '.sock');\r\n}\r\nfunction generatePatchedEnv(env, stdInPipeName, stdOutPipeName) {\r\n    // Set the two unique pipe names and the electron flag as process env\r\n    let newEnv = {};\r\n    for (let key in env) {\r\n        newEnv[key] = env[key];\r\n    }\r\n    newEnv['STDIN_PIPE_NAME'] = stdInPipeName;\r\n    newEnv['STDOUT_PIPE_NAME'] = stdOutPipeName;\r\n    newEnv['ATOM_SHELL_INTERNAL_RUN_AS_NODE'] = '1';\r\n    newEnv['ELECTRON_RUN_AS_NODE'] = '1';\r\n    return newEnv;\r\n}\r\nfunction fork(modulePath, args, options, callback) {\r\n    let callbackCalled = false;\r\n    let resolve = (result) => {\r\n        if (callbackCalled) {\r\n            return;\r\n        }\r\n        callbackCalled = true;\r\n        callback(undefined, result);\r\n    };\r\n    let reject = (err) => {\r\n        if (callbackCalled) {\r\n            return;\r\n        }\r\n        callbackCalled = true;\r\n        callback(err, undefined);\r\n    };\r\n    // Generate two unique pipe names\r\n    let stdInPipeName = generatePipeName();\r\n    let stdOutPipeName = generatePipeName();\r\n    let newEnv = generatePatchedEnv(options.env || process.env, stdInPipeName, stdOutPipeName);\r\n    let childProcess;\r\n    // Begin listening to stdout pipe\r\n    let stdOutServer = net.createServer((stdOutStream) => {\r\n        // The child process will write exactly one chunk with content `ready` when it has installed a listener to the stdin pipe\r\n        stdOutStream.once('data', (_chunk) => {\r\n            // The child process is sending me the `ready` chunk, time to connect to the stdin pipe\r\n            childProcess.stdin = net.connect(stdInPipeName);\r\n            // From now on the childProcess.stdout is available for reading\r\n            childProcess.stdout = stdOutStream;\r\n            resolve(childProcess);\r\n        });\r\n    });\r\n    stdOutServer.listen(stdOutPipeName);\r\n    let serverClosed = false;\r\n    let closeServer = () => {\r\n        if (serverClosed) {\r\n            return;\r\n        }\r\n        serverClosed = true;\r\n        process.removeListener('exit', closeServer);\r\n        stdOutServer.close();\r\n    };\r\n    // Create the process\r\n    let bootstrapperPath = path.join(__dirname, 'electronForkStart');\r\n    childProcess = cp.fork(bootstrapperPath, [modulePath].concat(args), {\r\n        silent: true,\r\n        cwd: options.cwd,\r\n        env: newEnv,\r\n        execArgv: options.execArgv\r\n    });\r\n    childProcess.once('error', (err) => {\r\n        closeServer();\r\n        reject(err);\r\n    });\r\n    childProcess.once('exit', (err) => {\r\n        closeServer();\r\n        reject(err);\r\n    });\r\n    // On exit still close server\r\n    process.once('exit', closeServer);\r\n}\r\nexports.fork = fork;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"client/node_modules/vscode-languageclient/lib/utils/electron.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}}],"sources":{"client/node_modules/vscode-languageclient/lib/utils/electron.js":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = require(\"path\");\r\nconst os = require(\"os\");\r\nconst net = require(\"net\");\r\nconst cp = require(\"child_process\");\r\nfunction makeRandomHexString(length) {\r\n    let chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\r\n    let result = '';\r\n    for (let i = 0; i < length; i++) {\r\n        let idx = Math.floor(chars.length * Math.random());\r\n        result += chars[idx];\r\n    }\r\n    return result;\r\n}\r\nfunction generatePipeName() {\r\n    let randomName = 'vscode-lang-' + makeRandomHexString(40);\r\n    if (process.platform === 'win32') {\r\n        return '\\\\\\\\.\\\\pipe\\\\' + randomName + '-sock';\r\n    }\r\n    // Mac/Unix: use socket file\r\n    return path.join(os.tmpdir(), randomName + '.sock');\r\n}\r\nfunction generatePatchedEnv(env, stdInPipeName, stdOutPipeName) {\r\n    // Set the two unique pipe names and the electron flag as process env\r\n    let newEnv = {};\r\n    for (let key in env) {\r\n        newEnv[key] = env[key];\r\n    }\r\n    newEnv['STDIN_PIPE_NAME'] = stdInPipeName;\r\n    newEnv['STDOUT_PIPE_NAME'] = stdOutPipeName;\r\n    newEnv['ATOM_SHELL_INTERNAL_RUN_AS_NODE'] = '1';\r\n    newEnv['ELECTRON_RUN_AS_NODE'] = '1';\r\n    return newEnv;\r\n}\r\nfunction fork(modulePath, args, options, callback) {\r\n    let callbackCalled = false;\r\n    let resolve = (result) => {\r\n        if (callbackCalled) {\r\n            return;\r\n        }\r\n        callbackCalled = true;\r\n        callback(undefined, result);\r\n    };\r\n    let reject = (err) => {\r\n        if (callbackCalled) {\r\n            return;\r\n        }\r\n        callbackCalled = true;\r\n        callback(err, undefined);\r\n    };\r\n    // Generate two unique pipe names\r\n    let stdInPipeName = generatePipeName();\r\n    let stdOutPipeName = generatePipeName();\r\n    let newEnv = generatePatchedEnv(options.env || process.env, stdInPipeName, stdOutPipeName);\r\n    let childProcess;\r\n    // Begin listening to stdout pipe\r\n    let stdOutServer = net.createServer((stdOutStream) => {\r\n        // The child process will write exactly one chunk with content `ready` when it has installed a listener to the stdin pipe\r\n        stdOutStream.once('data', (_chunk) => {\r\n            // The child process is sending me the `ready` chunk, time to connect to the stdin pipe\r\n            childProcess.stdin = net.connect(stdInPipeName);\r\n            // From now on the childProcess.stdout is available for reading\r\n            childProcess.stdout = stdOutStream;\r\n            resolve(childProcess);\r\n        });\r\n    });\r\n    stdOutServer.listen(stdOutPipeName);\r\n    let serverClosed = false;\r\n    let closeServer = () => {\r\n        if (serverClosed) {\r\n            return;\r\n        }\r\n        serverClosed = true;\r\n        process.removeListener('exit', closeServer);\r\n        stdOutServer.close();\r\n    };\r\n    // Create the process\r\n    let bootstrapperPath = path.join(__dirname, 'electronForkStart');\r\n    childProcess = cp.fork(bootstrapperPath, [modulePath].concat(args), {\r\n        silent: true,\r\n        cwd: options.cwd,\r\n        env: newEnv,\r\n        execArgv: options.execArgv\r\n    });\r\n    childProcess.once('error', (err) => {\r\n        closeServer();\r\n        reject(err);\r\n    });\r\n    childProcess.once('exit', (err) => {\r\n        closeServer();\r\n        reject(err);\r\n    });\r\n    // On exit still close server\r\n    process.once('exit', closeServer);\r\n}\r\nexports.fork = fork;\r\n"},"lineCount":104}},"error":null,"hash":"cdd7309dca788b664db17c736a428517","cacheData":{"env":{}}}